version: 2
jobs:
  build:
    environment:
      IMAGE_NAME: metrics
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - run:
          name: Build Docker image
          command: |
            export GITHUB_TOKEN=$GITHUB_TOKEN
            docker-compose up -d --build
      - run:
          name: List container images
          command: docker ps --format "{{.Image}}"
      - run:
          name: Push Docker images
          command: |
            echo "$DOCKERHUB_PWD" | docker login -u "$DOCKERHUB_ID" --password-stdin
            # Define the repository names
            metrics_repo="samkryszto/metrics-app"
            pgadmin_repo="samkryszto/pgadmin"
            postgres_repo="samkryszto/postgres"

            # Assign and push the metrics-app image
            docker tag metrics-app $metrics_repo:${CIRCLE_BUILD_NUM:-local}
            docker push $metrics_repo:${CIRCLE_BUILD_NUM:-local}

            # Assign and push the postgres image
            docker tag postgres:alpine $postgres_repo:${CIRCLE_BUILD_NUM:-local}
            docker push $postgres_repo:${CIRCLE_BUILD_NUM:-local}

            # Assign and push the pgadmin image
            docker tag dpage/pgadmin4 $pgadmin_repo:${CIRCLE_BUILD_NUM:-local}
            docker push $pgadmin_repo:${CIRCLE_BUILD_NUM:-local}

            # Additionally, tag and push them as 'latest' if the build number is not 'local'
            if [ "${CIRCLE_BUILD_NUM:-local}" != "local" ]; then
              docker tag metrics-app:latest $metrics_repo:latest
              docker push $metrics_repo:latest

              docker tag postgres:alpine $postgres_repo:latest
              docker push $postgres_repo:latest

              docker tag dpage/pgadmin4:latest $pgadmin_repo:latest
              docker push $pgadmin_repo:latest
            fi
  deploy:
      docker:
        - image: circleci/node:14
      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.24

        - run:
            name: Install kubectl
            command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              sudo mv kubectl /usr/local/bin/

        - run:
            name: Configure kubectl
            command: |
              mkdir -p /home/circleci/.kube
              mv /home/circleci/project/.kube/kubeconfig /home/circleci/.kube/config

        # Create Kubernetes Secrets from CircleCI Secrets 
       
        - run:
            name: Apply Secrets
            command: |
              export KUBECONFIG=/home/circleci/.kube/config
              kubectl delete secret db-secrets
              # Set up the Kubernetes Secret using CircleCI secrets as environment variables
              echo "Creating my-secrets in grp1-team14-namespace"
              kubectl create secret generic db-secrets \
                --from-literal=postgres_user="$POSTGRES_USER"
                --from-literal=postgres_password="$POSTGRES_PASSWORD"
                --from-literal=github_token="$GITHUB_TOKEN" -n grp1-team14-namespace

        - run:
            name: Deploy to Kubernetes (postgres)
            command: |
              # Set the KUBECONFIG environment variable to the config file path
              export KUBECONFIG=/home/circleci/.kube/config

              # Make sure you are in the correct directory (where deployment.yaml is located)
              cd /home/circleci/project

              # Use kubectl to apply the deployment.yaml file
              kubectl apply -f postgres-deployment.yaml
              # Additional kubectl commands for deployments, service updates, etc.
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - deploy:
         # requires:
            #- build
          filters:
            branches:
             only: kubernetes-deployment
